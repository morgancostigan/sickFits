{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Documents/Tier-4/Advanced-React-master/sick-fits/frontend/pages/_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport App, { Container } from 'next/app';\nimport Page from '../components/Page';\nimport { ApolloProvider } from 'react-apollo';\nimport withData from '../lib/withData';\n\nclass MyApp extends App {\n  // next.js runs getInitialProps before the initial render\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    let pageProps = {};\n\n    if (Component.getInitialProps) {\n      pageProps = Component.getInitialProps(ctx);\n    } // vvv this exposes the query to the user vvv\n\n\n    pageProps.query = ctx.query;\n    return {\n      pageProps\n    };\n  }\n\n  render() {\n    const {\n      Component,\n      apollo,\n      pageProps\n    } = this.props;\n    return __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }\n    }, __jsx(ApolloProvider, {\n      client: apollo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }\n    }, __jsx(Page, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 21\n      }\n    }, __jsx(Component, _extends({}, pageProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 25\n      }\n    }))))); //end return \n  }\n\n} //end MyApp class\n\n\nexport default withData(MyApp);","map":{"version":3,"sources":["/Users/macbookpro/Documents/Tier-4/Advanced-React-master/sick-fits/frontend/pages/_app.js"],"names":["App","Container","Page","ApolloProvider","withData","MyApp","getInitialProps","Component","ctx","pageProps","query","render","apollo","props"],"mappings":";;;;;;AAAC,OAAOA,GAAP,IAAcC,SAAd,QAA+B,UAA/B;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,OAAOC,QAAP,MAAqB,iBAArB;;AAGA,MAAMC,KAAN,SAAoBL,GAApB,CAAwB;AACrB;AACA,eAAaM,eAAb,CAA6B;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAA7B,EAAgD;AAC5C,QAAIC,SAAS,GAAG,EAAhB;;AACA,QAAIF,SAAS,CAACD,eAAd,EAAgC;AAC5BG,MAAAA,SAAS,GAAGF,SAAS,CAACD,eAAV,CAA0BE,GAA1B,CAAZ;AACH,KAJ2C,CAK5C;;;AACAC,IAAAA,SAAS,CAACC,KAAV,GAAkBF,GAAG,CAACE,KAAtB;AACA,WAAO;AAAED,MAAAA;AAAF,KAAP;AACH;;AACDE,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEJ,MAAAA,SAAF;AAAaK,MAAAA,MAAb;AAAqBH,MAAAA;AAArB,QAAmC,KAAKI,KAA9C;AAEA,WACI,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,cAAD;AAAgB,MAAA,MAAM,EAAED,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,SAAD,eAAeH,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADJ,CADJ,CADJ,CADJ,CAHK,CAWJ;AACJ;;AAvBoB,C,CAwBvB;;;AAED,eAAeL,QAAQ,CAACC,KAAD,CAAvB","sourcesContent":[" import App, { Container } from 'next/app';\n import Page from '../components/Page'; \n import { ApolloProvider } from 'react-apollo';\n import withData from '../lib/withData';\n\n\n class MyApp extends App {\n    // next.js runs getInitialProps before the initial render\n    static async getInitialProps({ Component, ctx}) {\n        let pageProps = {};\n        if (Component.getInitialProps ) {\n            pageProps = Component.getInitialProps(ctx);\n        }\n        // vvv this exposes the query to the user vvv\n        pageProps.query = ctx.query;\n        return { pageProps };\n    }\n    render (){\n        const { Component, apollo, pageProps } = this.props;\n\n        return(\n            <Container>\n                <ApolloProvider client={apollo}>\n                    <Page>\n                        <Component {...pageProps} />\n                    </Page>\n                </ApolloProvider>\n            </Container>\n        )//end return \n    } \n }//end MyApp class\n\n export default withData(MyApp); "]},"metadata":{},"sourceType":"module"}